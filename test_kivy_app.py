#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test de la aplicaci√≥n Kivy antes de generar APK
"""

import sys
import os

def test_kivy_import():
    """Probar importaci√≥n de Kivy"""
    print("üß™ PROBANDO IMPORTACI√ìN DE KIVY")
    print("=" * 50)
    
    try:
        import kivy
        print(f"‚úÖ Kivy versi√≥n: {kivy.__version__}")
        
        from kivy.app import App
        print("‚úÖ kivy.app importado")
        
        from kivy.uix.boxlayout import BoxLayout
        print("‚úÖ kivy.uix.boxlayout importado")
        
        from kivy.uix.label import Label
        print("‚úÖ kivy.uix.label importado")
        
        from kivy.uix.button import Button
        print("‚úÖ kivy.uix.button importado")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando Kivy: {e}")
        return False

def test_app_import():
    """Probar importaci√≥n de la aplicaci√≥n"""
    print("\nüß™ PROBANDO IMPORTACI√ìN DE DANISTORE APP")
    print("=" * 50)
    
    try:
        from danistore_app import DaniStoreApp
        print("‚úÖ DaniStoreApp importado correctamente")
        
        app = DaniStoreApp()
        print("‚úÖ Instancia de DaniStoreApp creada")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando DaniStoreApp: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error creando instancia: {e}")
        return False

def test_archivos_necesarios():
    """Verificar archivos necesarios para APK"""
    print("\nüß™ VERIFICANDO ARCHIVOS PARA APK")
    print("=" * 50)
    
    archivos = {
        'main.py': 'Punto de entrada principal',
        'danistore_app.py': 'Aplicaci√≥n Kivy',
        'buildozer.spec': 'Configuraci√≥n de Buildozer',
        'iconos_android/danistore_icon.png': 'Icono de la aplicaci√≥n'
    }
    
    todos_ok = True
    for archivo, descripcion in archivos.items():
        if os.path.exists(archivo):
            tama√±o = os.path.getsize(archivo)
            print(f"‚úÖ {archivo} ({tama√±o} bytes) - {descripcion}")
        else:
            print(f"‚ùå {archivo} - NO ENCONTRADO - {descripcion}")
            todos_ok = False
    
    return todos_ok

def crear_app_simple():
    """Crear una versi√≥n simple para probar"""
    print("\nüß™ CREANDO APP DE PRUEBA SIMPLE")
    print("=" * 50)
    
    app_simple = '''#!/usr/bin/env python3
from kivy.app import App
from kivy.uix.label import Label

class TestApp(App):
    def build(self):
        return Label(text='¬°DaniStore funciona!\\n\\nLa aplicaci√≥n est√° lista\\npara convertir a APK')

if __name__ == '__main__':
    TestApp().run()
'''
    
    with open('test_simple.py', 'w', encoding='utf-8') as f:
        f.write(app_simple)
    
    print("‚úÖ App de prueba creada: test_simple.py")
    print("üöÄ Ejecuta: python test_simple.py")

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ PRUEBAS PRE-APK DANISTORE")
    print("=" * 60)
    
    # Test 1: Kivy
    kivy_ok = test_kivy_import()
    
    # Test 2: App
    app_ok = test_app_import()
    
    # Test 3: Archivos
    archivos_ok = test_archivos_necesarios()
    
    # Test 4: App simple
    crear_app_simple()
    
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    if kivy_ok:
        print("‚úÖ Kivy: FUNCIONANDO")
    else:
        print("‚ùå Kivy: ERROR")
    
    if app_ok:
        print("‚úÖ DaniStore App: FUNCIONANDO")
    else:
        print("‚ùå DaniStore App: ERROR")
    
    if archivos_ok:
        print("‚úÖ Archivos APK: COMPLETOS")
    else:
        print("‚ùå Archivos APK: INCOMPLETOS")
    
    if kivy_ok and app_ok and archivos_ok:
        print("\nüéâ ¬°TODO LISTO PARA GENERAR APK!")
        print("\nüöÄ COMANDOS PARA GENERAR APK:")
        print("   buildozer android debug")
        print("   # O en Linux/Mac:")
        print("   buildozer android release")
    else:
        print("\n‚ö†Ô∏è  HAY PROBLEMAS QUE RESOLVER ANTES DE GENERAR APK")
    
    print("\nüì± PR√ìXIMOS PASOS:")
    print("1. Probar app simple: python test_simple.py")
    print("2. Probar app completa: python danistore_app.py")
    print("3. Generar APK: buildozer android debug")
    print("4. Instalar APK en Android")

if __name__ == "__main__":
    main()