#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Servicio de Notificaciones - VERSI√ìN DE PRUEBA
Verifica cada minuto para testing
Gestor de Suscripciones - Dani666
"""

import json
import os
import time
import threading
from datetime import datetime, timedelta
import sys

# Importar librer√≠as para notificaciones de Windows
try:
    from plyer import notification
    PLYER_AVAILABLE = True
except ImportError:
    PLYER_AVAILABLE = False

try:
    import win10toast
    WIN10TOAST_AVAILABLE = True
except ImportError:
    WIN10TOAST_AVAILABLE = False

class ServicioNotificacionesTest:
    def __init__(self):
        self.archivo_datos = "suscripciones_data.json"
        self.ejecutando = True
        self.intervalo_verificacion = 60  # 1 minuto para pruebas
        
        # Configurar notificador
        if WIN10TOAST_AVAILABLE:
            self.toaster = win10toast.ToastNotifier()
        
        print("üß™ SERVICIO DE NOTIFICACIONES - MODO PRUEBA")
        print("=" * 50)
        print(f"‚è∞ Verificando cada {self.intervalo_verificacion} segundos (1 minuto)")
        print("üîî Notificar√° suscripciones que venzan en:")
        print("   ‚Ä¢ 0 minutos (vence ahora)")
        print("   ‚Ä¢ 1 minuto")
        print("   ‚Ä¢ 2 minutos")
        print("   ‚Ä¢ Ya vencidas")
        print("üí° Para detener: Ctrl+C")
        print("=" * 50)
    
    def cargar_suscripciones(self):
        """Cargar suscripciones desde el archivo"""
        if not os.path.exists(self.archivo_datos):
            print("‚ö†Ô∏è No se encontr√≥ archivo de suscripciones")
            return []
        
        try:
            with open(self.archivo_datos, 'r', encoding='utf-8') as f:
                suscripciones = json.load(f)
                print(f"üìã Cargadas {len(suscripciones)} suscripciones")
                return suscripciones
        except Exception as e:
            print(f"‚ùå Error cargando suscripciones: {e}")
            return []
    
    def enviar_notificacion_windows(self, titulo, mensaje):
        """Enviar notificaci√≥n nativa de Windows"""
        try:
            if WIN10TOAST_AVAILABLE:
                # Usar win10toast para notificaciones m√°s nativas
                icon_path = None
                if os.path.exists('gestor_icon.ico'):
                    icon_path = 'gestor_icon.ico'
                
                self.toaster.show_toast(
                    title=titulo,
                    msg=mensaje,
                    icon_path=icon_path,
                    duration=10,
                    threaded=True
                )
                print(f"‚úÖ Notificaci√≥n enviada: {titulo}")
                return True
                
            elif PLYER_AVAILABLE:
                # Usar plyer como alternativa
                notification.notify(
                    title=titulo,
                    message=mensaje,
                    app_name="Gestor Suscripciones",
                    timeout=10
                )
                print(f"‚úÖ Notificaci√≥n enviada: {titulo}")
                return True
            
        except Exception as e:
            print(f"‚ùå Error enviando notificaci√≥n: {e}")
        
        return False
    
    def verificar_vencimientos(self):
        """Verificar suscripciones pr√≥ximas a vencer"""
        suscripciones = self.cargar_suscripciones()
        if not suscripciones:
            print("üì≠ No hay suscripciones para verificar")
            return
        
        ahora = datetime.now()
        notificaciones_enviadas = 0
        
        print(f"\nüîç Verificando vencimientos... {ahora.strftime('%H:%M:%S')}")
        
        for suscripcion in suscripciones:
            if not suscripcion.get('activa', True):
                continue
            
            fecha_vencimiento_str = suscripcion.get('fecha_vencimiento')
            if not fecha_vencimiento_str or fecha_vencimiento_str == 'Indefinido':
                continue
            
            try:
                fecha_vencimiento = datetime.strptime(fecha_vencimiento_str, '%Y-%m-%d %H:%M:%S')
                diferencia = fecha_vencimiento - ahora
                minutos_restantes = int(diferencia.total_seconds() / 60)
                
                usuario = suscripcion.get('usuario', 'Usuario')
                servicio = suscripcion.get('servicio', 'Servicio')
                
                print(f"   üì∫ {usuario} - {servicio}: {minutos_restantes} minutos restantes")
                
                # Verificar si debe notificar (0, 1, 2 minutos o ya vencida)
                if minutos_restantes in [0, 1, 2] or minutos_restantes < 0:
                    self.enviar_notificacion_vencimiento(suscripcion, minutos_restantes)
                    notificaciones_enviadas += 1
                    
            except Exception as e:
                print(f"‚ùå Error procesando {usuario}: {e}")
        
        if notificaciones_enviadas > 0:
            print(f"üì§ {notificaciones_enviadas} notificaciones enviadas")
        else:
            print("‚úÖ No hay notificaciones pendientes")
    
    def enviar_notificacion_vencimiento(self, suscripcion, minutos_restantes):
        """Enviar notificaci√≥n espec√≠fica de vencimiento"""
        usuario = suscripcion.get('usuario', 'Usuario')
        servicio = suscripcion.get('servicio', 'Servicio')
        
        if minutos_restantes <= 0:
            titulo = "üö® SUSCRIPCI√ìN VENCIDA"
            if minutos_restantes == 0:
                mensaje = f"‚ö†Ô∏è {usuario} - {servicio}\nüîî ¬°VENCE AHORA!"
            else:
                mensaje = f"üíî {usuario} - {servicio}\nüìâ Vencida hace {abs(minutos_restantes)} minutos"
        elif minutos_restantes == 1:
            titulo = "‚ö†Ô∏è VENCE EN 1 MINUTO"
            mensaje = f"üìÖ {usuario} - {servicio}\n‚è∞ ¬°Solo queda 1 minuto!"
        elif minutos_restantes == 2:
            titulo = "üìã VENCE EN 2 MINUTOS"
            mensaje = f"üì∫ {usuario} - {servicio}\n‚è≥ Quedan 2 minutos"
        
        # Enviar notificaci√≥n
        self.enviar_notificacion_windows(titulo, mensaje)
    
    def ejecutar_servicio(self):
        """Ejecutar el servicio en bucle continuo"""
        print("üöÄ Iniciando monitoreo de prueba...")
        
        while self.ejecutando:
            try:
                self.verificar_vencimientos()
                
                # Esperar 1 minuto
                print(f"‚è≥ Esperando {self.intervalo_verificacion} segundos hasta la pr√≥xima verificaci√≥n...")
                for i in range(self.intervalo_verificacion):
                    if not self.ejecutando:
                        break
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\nüõë Deteniendo servicio de prueba...")
                self.ejecutando = False
                break
            except Exception as e:
                print(f"‚ùå Error en el servicio: {e}")
                time.sleep(10)  # Esperar 10 segundos antes de reintentar
    
    def detener(self):
        """Detener el servicio"""
        self.ejecutando = False

def main():
    """Funci√≥n principal"""
    print("üß™ SERVICIO DE NOTIFICACIONES - MODO PRUEBA")
    print("=" * 60)
    
    # Verificar dependencias
    if not PLYER_AVAILABLE and not WIN10TOAST_AVAILABLE:
        print("‚ùå ERROR: No se encontraron librer√≠as de notificaciones")
        print("üí° Instalar con: pip install plyer win10toast")
        return
    
    # Crear y ejecutar servicio
    servicio = ServicioNotificacionesTest()
    
    try:
        servicio.ejecutar_servicio()
    except KeyboardInterrupt:
        print("\nüõë Servicio detenido por el usuario")
    finally:
        servicio.detener()
        print("‚úÖ Servicio de prueba finalizado")

if __name__ == "__main__":
    main()